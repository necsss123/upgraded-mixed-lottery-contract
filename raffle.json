{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"
        },
        "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
        },
        "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
        },
        "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
        },
        "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
        },
        "@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
        },
        "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VRFV2PlusClient} from \"../libraries/VRFV2PlusClient.sol\";\nimport {IVRFSubscriptionV2Plus} from \"./IVRFSubscriptionV2Plus.sol\";\n\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\n  /**\n   * @notice Request a set of random words.\n   * @param req - a struct containing following fields for randomness request:\n   * keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * requestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * extraArgs - abi-encoded extra args\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\n}\n"
        },
        "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\n/// @notice method required to be implemented by all V2Plus consumers.\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\ninterface IVRFMigratableConsumerV2Plus {\n  event CoordinatorSet(address vrfCoordinator);\n\n  /// @notice Sets the VRF Coordinator address\n  /// @notice This method should only be callable by the coordinator or contract owner\n  function setCoordinator(address vrfCoordinator) external;\n}\n"
        },
        "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\n/// @notice related methods implemented by the V2Plus coordinator.\ninterface IVRFSubscriptionV2Plus {\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint256 subId, address to) external;\n\n  /**\n   * @notice Accept subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n   * @dev  to send Native with the call, for example:\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\n   */\n  function createSubscription() external returns (uint256 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return nativeBalance - native balance of the subscription in wei.\n   * @return reqCount - Requests count of subscription.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint256 subId\n  )\n    external\n    view\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint256 subId) external view returns (bool);\n\n  /**\n   * @notice Paginate through all active VRF subscriptions.\n   * @param startIndex index of the subscription to start from\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\n   */\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\n\n  /**\n   * @notice Fund a subscription with native.\n   * @param subId - ID of the subscription\n   * @notice This method expects msg.value to be greater than or equal to 0.\n   */\n  function fundSubscriptionWithNative(uint256 subId) external payable;\n}\n"
        },
        "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// End consumer library.\nlibrary VRFV2PlusClient {\n  // extraArgs will evolve to support new features\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\"VRF ExtraArgsV1\"));\n  struct ExtraArgsV1 {\n    bool nativePayment;\n  }\n\n  struct RandomWordsRequest {\n    bytes32 keyHash;\n    uint256 subId;\n    uint16 requestConfirmations;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n    bytes extraArgs;\n  }\n\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
        },
        "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IVRFCoordinatorV2Plus} from \"./interfaces/IVRFCoordinatorV2Plus.sol\";\nimport {IVRFMigratableConsumerV2Plus} from \"./interfaces/IVRFMigratableConsumerV2Plus.sol\";\nimport {ConfirmedOwner} from \"../../shared/access/ConfirmedOwner.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords, extraArgs),\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n *\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\n  error ZeroAddress();\n\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\n  // so that coordinator reference is updated after migration\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\n    if (msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n\n  /**\n   * @inheritdoc IVRFMigratableConsumerV2Plus\n   */\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n\n    emit CoordinatorSet(_vrfCoordinator);\n  }\n\n  modifier onlyOwnerOrCoordinator() {\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\n    }\n    _;\n  }\n}\n"
        },
        "contracts/Raffle.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {VRFConsumerBaseV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\";\nimport {VRFV2PlusClient} from \"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\";\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\nimport {IVRFCoordinatorV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\";\n\nerror Raffle__NotEnoughETHEntered();\nerror Raffle__TransferFailed();\nerror Raffle__NotOpen();\nerror Raffle__Full();\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\n\ncontract Raffle is VRFConsumerBaseV2Plus, AutomationCompatibleInterface {\n    enum RaffleState {\n        OPEN,\n        CALCULATING\n    }\n\n    enum SubResSymbol {\n        POSITIVE,\n        NEGATIVE,\n        ZERO\n    }\n\n    struct Participant {\n        address payable player;\n        uint8 selectedNum;\n        SubResSymbol selectedNumSubResSymbol; // 前端链下计算\n        uint8 abs; // 前端链下计算\n        uint8 absDiffFromLuckyNum; // 默认全是0\n        uint256 participatedTimeStamp; // 用户选好数字参与进来那一刻的时间戳，由前端传进来\n    }\n\n    uint256 private immutable i_entranceFee;\n    bytes32 private immutable i_gasLane;\n    uint256 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint256 private immutable i_interval;\n    IVRFCoordinatorV2Plus private immutable i_vrfCoordinator;\n    uint8 private constant REQUEST_CONFIRMATIONS = 3;\n    uint8 private constant NUM_WORDS = 1;\n    uint8 private constant Num_PARTICIPANTS = 52;\n    uint256 private constant Num_PRIZEPOOLAMOUNT = 156000000000000000000;\n\n    RaffleState private s_raffleState;\n    uint256 private s_lastTimeStamp;\n\n    Participant[] private s_participants;\n    bool private s_full;\n\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n\n    event WinnersPicked(uint8 indexed luckyNum1, uint8 indexed luckyNum2);\n\n    constructor(\n        address vrfCoordinator,\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint256 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval\n    ) VRFConsumerBaseV2Plus(vrfCoordinator) {\n        i_vrfCoordinator = IVRFCoordinatorV2Plus(vrfCoordinator);\n        i_entranceFee = entranceFee;\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_raffleState = RaffleState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        s_full = false;\n        i_interval = interval;\n    }\n\n    function enterRaffle(\n        uint8 _selectedNum,\n        SubResSymbol _selectedNumSubResSymbol,\n        uint8 _abs,\n        uint256 _participatedTimeStamp\n    ) public payable {\n        if (msg.value < i_entranceFee) {\n            revert Raffle__NotEnoughETHEntered();\n        }\n\n        if (s_raffleState != RaffleState.OPEN) {\n            revert Raffle__NotOpen();\n        }\n\n        if (s_full == true) {\n            revert Raffle__Full();\n        }\n\n        s_participants.push(\n            Participant(\n                payable(msg.sender),\n                _selectedNum,\n                _selectedNumSubResSymbol,\n                _abs,\n                0,\n                _participatedTimeStamp\n            )\n        );\n\n        if (s_participants.length == Num_PARTICIPANTS) {\n            s_full = true;\n        }\n\n        // 把函数名反过来命名Event\n        emit RaffleEnter(msg.sender);\n    }\n\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasBalance = address(this).balance > 0;\n        // upkeepNeeded = (isOpen && timePassed && s_full && hasBalance);\n        upkeepNeeded = (isOpen && timePassed && hasBalance);\n    }\n\n    function performUpkeep(bytes calldata /* performData */) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert Raffle__UpkeepNotNeeded(\n                address(this).balance,\n                s_participants.length,\n                uint256(s_raffleState)\n            );\n        }\n\n        s_raffleState = RaffleState.CALCULATING;\n\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            VRFV2PlusClient.RandomWordsRequest({\n                keyHash: i_gasLane,\n                subId: i_subscriptionId,\n                requestConfirmations: REQUEST_CONFIRMATIONS,\n                callbackGasLimit: i_callbackGasLimit,\n                numWords: NUM_WORDS,\n                extraArgs: VRFV2PlusClient._argsToBytes(\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: false})\n                )\n            })\n        );\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    function fulfillRandomWords(\n        uint256 /*requestId*/,\n        uint256[] calldata randomWords\n    ) internal override {\n        uint8 luckyNum = uint8(randomWords[0] % 100); // 0~99\n        (uint8 luckyNum1, uint8 luckyNum2, uint8 abs, SubResSymbol absSymbol) = splitLuckyNums(\n            luckyNum\n        );\n\n        (\n            Participant[] memory winnersWhoGuessedTheLuckyNum,\n            uint8 numOfJackpotWinners\n        ) = pickTheFirstPrizeWinners(luckyNum1, luckyNum2);\n        // 剩下的非幸运数字中奖者数量\n        uint8 theNumOfOtherWinners = numOfWinnersWhoDidNotGuessTheLuckyNum(\n            uint8(winnersWhoGuessedTheLuckyNum.length)\n        );\n        // 没有猜中2个幸运数字的参与者\n        Participant[] memory theOtherParticipants = differenceOfTwoArrs(\n            winnersWhoGuessedTheLuckyNum,\n            s_participants\n        );\n\n        // 通过绝对值进行筛选剩余非幸运数字中奖者\n        Participant[] memory nonLuckyNumWinners = getNonLuckyNumWinners(\n            theOtherParticipants,\n            theNumOfOtherWinners,\n            luckyNum1,\n            abs,\n            absSymbol\n        );\n\n        // 获得完整的中奖者名单，13人---只有一个人猜中头奖的前提下，12人---无人猜中头奖\n\n        // 将头奖资金打给头奖获得者 和 猜中luckyNum2的非头奖获得者\n        if (numOfJackpotWinners != 0) {\n            uint256 jackpotPrize = 48000000000000000000 / numOfJackpotWinners;\n            for (uint8 i = 0; i < winnersWhoGuessedTheLuckyNum.length; i++) {\n                if (i < numOfJackpotWinners) {\n                    (bool success, ) = winnersWhoGuessedTheLuckyNum[i].player.call{\n                        value: jackpotPrize\n                    }(\"\");\n                    if (!success) {\n                        revert Raffle__TransferFailed();\n                    }\n                } else {\n                    (bool success, ) = winnersWhoGuessedTheLuckyNum[i].player.call{\n                        value: 9000000000000000000\n                    }(\"\");\n                    if (!success) {\n                        revert Raffle__TransferFailed();\n                    }\n                }\n            }\n\n            // 将奖金打给非头奖获得者\n            for (uint8 i = 0; i < nonLuckyNumWinners.length; i++) {\n                (bool success, ) = nonLuckyNumWinners[i].player.call{value: 9000000000000000000}(\n                    \"\"\n                );\n                if (!success) {\n                    revert Raffle__TransferFailed();\n                }\n            }\n        } else {\n            for (uint8 i = 0; i < nonLuckyNumWinners.length; i++) {\n                (bool success, ) = nonLuckyNumWinners[i].player.call{value: 113000000000000000000}(\n                    \"\"\n                );\n                if (!success) {\n                    revert Raffle__TransferFailed();\n                }\n            }\n        }\n\n        s_raffleState = RaffleState.OPEN;\n        s_full = false;\n        s_lastTimeStamp = block.timestamp;\n        delete s_participants;\n\n        // address payable recentWinner = s_participants[indexOfWinner];\n        // s_recentWinner = recentWinner;\n        // s_raffleState = RaffleState.OPEN;\n        // s_participants = new address payable[](0); // 大小为0的数组\n        // s_lastTimeStamp = block.timestamp;\n        // (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        // if (!success) {\n        //     revert Raffle__TransferFailed();\n        // }\n        emit WinnersPicked(luckyNum1, luckyNum2);\n    }\n\n    // 对幸运数字进行分裂处理，返回2个幸运数字，25->52  33->66\n    function splitLuckyNums(\n        uint8 luckyNum\n    ) private pure returns (uint8 luckyNum1, uint8 luckyNum2, uint8 abs, SubResSymbol absSymbol) {\n        luckyNum1 = luckyNum;\n        int8 remainder = int8(luckyNum) % 10;\n        int8 tens = int8(luckyNum) / 10;\n        int8 subRes = tens - remainder;\n        if (subRes > 0) {\n            absSymbol = SubResSymbol.POSITIVE;\n            abs = uint8(subRes);\n        } else if (subRes < 0) {\n            absSymbol = SubResSymbol.NEGATIVE;\n            abs = uint8(-subRes);\n        } else {\n            absSymbol = SubResSymbol.ZERO;\n            abs = 0;\n        }\n        if (remainder == tens) {\n            luckyNum2 = 99 - luckyNum;\n        } else {\n            luckyNum2 = uint8(remainder) * 10 + uint8(tens);\n        }\n    }\n\n    // 筛选符合2个幸运数字的获奖者 和 头奖获得者的数量\n    function pickTheFirstPrizeWinners(\n        uint8 luckyNum1,\n        uint8 luckyNum2\n    )\n        private\n        view\n        returns (Participant[] memory winnersWhoGuessedTheLuckyNum, uint8 numOfJackpotWinners)\n    {\n        uint8 count = 0;\n        for (uint i = 0; i < Num_PARTICIPANTS; i++) {\n            if (s_participants[i].selectedNum == luckyNum1) {\n                winnersWhoGuessedTheLuckyNum[count] = s_participants[i];\n                count++;\n            }\n        }\n        numOfJackpotWinners = uint8(winnersWhoGuessedTheLuckyNum.length);\n        // 如果没有人选中luckyNum1，luckyNum2将作为头奖的幸运数字，筛选是否有人选中了luckyNum2\n        if (winnersWhoGuessedTheLuckyNum.length == 0) {\n            for (uint i = 0; i < Num_PARTICIPANTS; i++) {\n                if (s_participants[i].selectedNum == luckyNum2) {\n                    winnersWhoGuessedTheLuckyNum[count] = s_participants[i];\n                    count++;\n                }\n            }\n            numOfJackpotWinners = uint8(winnersWhoGuessedTheLuckyNum.length);\n            // 如果有人选中luckyNum1，继续选出符合中奖条件，既猜中luckyNum2的非头奖获得者\n        } else {\n            for (uint i = 0; i < Num_PARTICIPANTS; i++) {\n                if (s_participants[i].selectedNum == luckyNum2) {\n                    winnersWhoGuessedTheLuckyNum[count] = s_participants[i];\n                    count++;\n                }\n            }\n        }\n        return (winnersWhoGuessedTheLuckyNum, numOfJackpotWinners);\n    }\n\n    // 没有猜中2个幸运数字的获奖者人数\n    function numOfWinnersWhoDidNotGuessTheLuckyNum(\n        uint8 numOfWinnersWhoGuessedTheLuckyNum\n    ) private pure returns (uint8 num) {\n        numOfWinnersWhoGuessedTheLuckyNum == 0 ? num = 12 : num =\n            13 -\n            numOfWinnersWhoGuessedTheLuckyNum;\n    }\n\n    // 求2个数组之差\n    function differenceOfTwoArrs(\n        Participant[] memory arrTobeSubtracted,\n        Participant[] memory arr\n    ) private pure returns (Participant[] memory) {\n        Participant[] memory result;\n        uint8 index = 0;\n\n        for (uint8 i = 0; i < arr.length; i++) {\n            bool found = false;\n            for (uint8 j = 0; j < arrTobeSubtracted.length; j++) {\n                if (arr[i].player == arrTobeSubtracted[j].player) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                result[index] = arr[i];\n                index++;\n            }\n        }\n        return result;\n    }\n\n    // 筛选出剩下的没有猜中2个幸运数字的获奖者\n    function getNonLuckyNumWinners(\n        Participant[] memory theOtherParticipants,\n        uint8 theNumOfOtherWinners,\n        uint8 luckyNum1,\n        uint8 abs,\n        SubResSymbol symbol\n    ) private returns (Participant[] memory theOtherWinners) {\n        Participant[] memory lastResult;\n        if (symbol != SubResSymbol.ZERO) {\n            (\n                Participant[] memory allOtherWinners,\n                Participant[] memory theLastFilter\n            ) = recursiveFilter(\n                    symbol,\n                    abs,\n                    theNumOfOtherWinners,\n                    theOtherParticipants,\n                    0,\n                    lastResult\n                );\n            require(\n                allOtherWinners.length >= theNumOfOtherWinners,\n                \"Not enough non-lucky number winners were screened!\"\n            );\n            uint8 extraWinnersNum = uint8(allOtherWinners.length) - theNumOfOtherWinners;\n            if (extraWinnersNum != 0) {\n                // 冒泡排序，按参与时间从早到晚进行排序\n                uint8 len = uint8(theLastFilter.length) - 1;\n                for (uint8 i = 0; i < len; i++) {\n                    for (uint8 j = 0; j < len - 1 - i; j++) {\n                        if (\n                            theLastFilter[j].participatedTimeStamp >\n                            theLastFilter[j + 1].participatedTimeStamp\n                        ) {\n                            Participant memory temp = theLastFilter[j + 1];\n                            theLastFilter[j + 1] = theLastFilter[j];\n                            theLastFilter[j] = temp;\n                        }\n                    }\n                }\n                Participant[] memory eliminationOfTheWinners;\n                uint8 theIndexOfEliminationWinners = uint8(theLastFilter.length) -\n                    theNumOfOtherWinners;\n                for (uint8 i = 0; i < extraWinnersNum; i++) {\n                    eliminationOfTheWinners[i] = theLastFilter[theIndexOfEliminationWinners];\n                }\n\n                theOtherWinners = differenceOfTwoArrs(eliminationOfTheWinners, allOtherWinners);\n            }\n        } else {\n            for (uint8 i = 0; i < theOtherParticipants.length; i++) {\n                uint8 absRes;\n                int8 res = int8(theOtherParticipants[i].selectedNum) - int8(luckyNum1);\n                res < 0 ? absRes = uint8(-res) : absRes = uint8(res);\n                if (absRes > 50) {\n                    absRes = 100 - absRes;\n                }\n                theOtherParticipants[i].absDiffFromLuckyNum = absRes;\n            }\n            // 对每个对象中的absDiffFromLuckyNum由小到大进行排序，越小说明离luckNum1越近\n            uint8 minDiffAbs = theOtherParticipants[0].absDiffFromLuckyNum;\n            uint8 minIndex = 0;\n            Participant[] memory closestParticipant;\n            for (uint8 i = 0; i < theNumOfOtherWinners; i++) {\n                for (uint8 j = 1; j < theOtherParticipants.length; j++) {\n                    if (theOtherParticipants[j].absDiffFromLuckyNum <= minDiffAbs) {\n                        minDiffAbs = theOtherParticipants[j].absDiffFromLuckyNum;\n                        minIndex = j;\n                    }\n                }\n                closestParticipant[i] = theOtherParticipants[minIndex];\n                theOtherParticipants[minIndex].absDiffFromLuckyNum = 50;\n            }\n            theOtherWinners = closestParticipant;\n        }\n    }\n\n    function recursiveFilter(\n        SubResSymbol symbol,\n        uint8 abs,\n        uint8 theNumOfOtherWinners,\n        Participant[] memory theOtherParticipants,\n        uint8 count,\n        Participant[] memory lastResult\n    )\n        private\n        returns (Participant[] memory result, Participant[] memory theLastFilterParticipants)\n    {\n        uint8 judementStandardAbs = abs;\n        Participant[] memory theRestOfParticipants;\n        uint8 theNumOfWinnersOfScreen;\n        uint8 filterParticipantsNum = 0;\n        uint8 lastResultCount = uint8(lastResult.length);\n\n        if (judementStandardAbs != 0) {\n            // 先按标准3进行筛选，由52 -> 41、74\n            for (uint8 i = 0; i < theOtherParticipants.length; i++) {\n                if (\n                    judementStandardAbs == theOtherParticipants[i].abs &&\n                    symbol == theOtherParticipants[i].selectedNumSubResSymbol\n                ) {\n                    lastResult[count] = theOtherParticipants[i];\n                    lastResultCount++;\n                    // lastResult.push(theOtherParticipants[i]);\n                    theLastFilterParticipants[filterParticipantsNum] = theOtherParticipants[i];\n                    filterParticipantsNum++;\n                } else {\n                    theRestOfParticipants[i] = theOtherParticipants[i];\n                }\n            }\n\n            symbol == SubResSymbol.POSITIVE ? symbol = SubResSymbol.NEGATIVE : symbol = SubResSymbol\n                .POSITIVE;\n            count++;\n\n            if (count % 2 == 0 && symbol == SubResSymbol.NEGATIVE) {\n                judementStandardAbs++;\n                judementStandardAbs == 10 ? judementStandardAbs = 0 : judementStandardAbs;\n            } else if (count % 2 == 0 && symbol == SubResSymbol.POSITIVE) {\n                judementStandardAbs--;\n            }\n            if (lastResult.length < theNumOfOtherWinners) {\n                theNumOfWinnersOfScreen = theNumOfOtherWinners - uint8(lastResult.length);\n                recursiveFilter(\n                    symbol,\n                    judementStandardAbs,\n                    theNumOfWinnersOfScreen,\n                    theRestOfParticipants,\n                    count,\n                    lastResult\n                );\n            } else {\n                result = lastResult;\n                return (result, theLastFilterParticipants);\n            }\n        } else {\n            for (uint8 i = 0; i < theOtherParticipants.length; i++) {\n                if (judementStandardAbs == theOtherParticipants[i].abs) {\n                    // lastResult.push(theOtherParticipants[i]);\n                    lastResult[count] = theOtherParticipants[i];\n                    lastResultCount++;\n\n                    theLastFilterParticipants[filterParticipantsNum] = theOtherParticipants[i];\n                    filterParticipantsNum++;\n                } else {\n                    theRestOfParticipants[i] = theOtherParticipants[i];\n                }\n            }\n\n            symbol == SubResSymbol.POSITIVE ? symbol = SubResSymbol.NEGATIVE : symbol = SubResSymbol\n                .POSITIVE;\n            count = count + 2;\n\n            if (symbol == SubResSymbol.NEGATIVE) {\n                judementStandardAbs = 9;\n            } else if (symbol == SubResSymbol.POSITIVE) {\n                judementStandardAbs = 1;\n            }\n\n            if (lastResult.length < theNumOfOtherWinners) {\n                theNumOfWinnersOfScreen = theNumOfOtherWinners - uint8(lastResult.length);\n                recursiveFilter(\n                    symbol,\n                    judementStandardAbs,\n                    theNumOfWinnersOfScreen,\n                    theRestOfParticipants,\n                    count,\n                    lastResult\n                );\n            } else {\n                result = lastResult;\n                return (result, theLastFilterParticipants);\n            }\n        }\n    }\n\n    // function filterTheRestOfWinners(\n    //     Participant[] firstPrizeWinners\n    // ) private returns (Participant[] otherWinners) {}\n\n    // function thirteenWinners(uint8 luckyNum) private returns (uint8[]) {}\n\n    function getContractBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getIsitFull() public view returns (bool) {\n        return s_full;\n    }\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getParticipant(uint8 index) public view returns (address) {\n        return s_participants[index].player;\n    }\n\n    // function getRecentWinner() public view returns (address) {\n    //     return s_recentWinner;\n    // }\n\n    function getRaffleState() public view returns (RaffleState) {\n        return s_raffleState;\n    }\n\n    function getNumWords() public pure returns (uint8) {\n        return NUM_WORDS;\n    }\n\n    function getNumberOfPlayers() public view returns (uint256) {\n        return s_participants.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint8) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "paris",
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": { "useLiteralContent": true }
    }
}
